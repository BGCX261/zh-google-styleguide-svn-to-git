2. 缩进和格式
---------------

2.1. 空格和制表符
~~~~~~~~~~~~~~~~~~

.. tip::
     只使用空格, 每次缩进 2 个空格.
    
我们使用空格缩进. 不要在代码中使用制符表. 你应该设置编辑器将制符表转为空格.

2.2. 行长度
~~~~~~~~~~~~~~~~~~

.. tip::
    每一行代码字符数不超过 80.
    
虽然Objective-C 是一种比C++ 冗余的语言, 但考虑到规范之间的互操作性, 我们决定将Objective-C 的行数也限制在80 列之内. 这比预想的更容易被接受.
    
我们认识到这项规则存有争议的, 但是许多已有代码已经在遵循它, 而且我们认为相容性也很重要.
    
在Xcode中你通过设置``Xcode&gt; Preferences &gt; Text Editing &gt; Show page guide``违反原有规定

2.3. 方法声明和定义
~~~~~~~~~~~~~~~~~~~~~

.. tip::
    ``-`` 或者 ``+`` 与返回值类型之间应该有一个空格, 除参数之间的间隔外, 参数列表中不能有间隔.
    
方法应该像下面这样声明和定义

    .. code-block:: c++
        
        - (void)doSomethingWithString:(NSString *)theString {
          ...
        }
    
星号前面的间隔是可选的. 但是增加新代码时, 需要与周边文件的代码风格保持一致.
    
如果你的参数过多超过了一行, 让每个参数占用一行是首选的. 如果使用多行, 在参数前使用``:``对齐.
    
    .. code-block:: c++
        
        - (void)doSomethingWith:(GTMFoo *)theFoo
                           rect:(NSRect)theRect
                       interval:(float)theInterval {
          ...
        }

2.4.  ``@public ``和  ``@private ``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tip::
    访问控制声明``@public`` 和 ``@private``, 每次缩进 1 个空格.
    
与C++中的``public``, ``private``, 和``protected``类似.

    .. code-block:: c++
        
        @interface MyClass : NSObject {
         @public
          ...
         @private
          ...
        }
        @end

2.5. 异常
~~~~~~~~~~~~~~~~~~

.. tip::
    带有``@``的格式化异常标签和大括号(``{``)之间应包含一个空格, ``@catch``和被捕获对象的声明之间同样需要一个空格.
    
如果你一定要是用 Obj-C 异常, 使用下面的格式. 但是, 你应该尽量避免使用异常, 参考ref:`避免使用异常`.

    .. code-block:: c++
        
        @try {
          foo();
        }
        @catch (NSException *ex) {
          bar(ex);
        }
        @finally {
          baz();
        }
